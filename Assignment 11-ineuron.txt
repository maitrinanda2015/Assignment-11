<aside>
💡 **1**

Given a non-negative integer `x`, return *the square root of* `x` *rounded down to the nearest integer*. The returned integer should be **non-negative** as well.

You **must not use** any built-in exponent function or operator.

Input: x = 4
Output: 2
Explanation: The square root of 4 is 2, so we return 2.

Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.
ans-:
public class SquareRoot {
    public static int sqrt(int x) {
        if (x == 0) {
            return 0;
        }

        int left = 1;
        int right = x;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (mid <= x / mid && (mid + 1) > x / (mid + 1)) {
                return mid;
            } else if (mid > x / mid) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return -1; // This line should not be reached for non-negative inputs
    }

    public static void main(String[] args) {
        int x = 4;
        int result = sqrt(x);
        System.out.println("Square root of " + x + " is: " + result);

        x = 8;
        result = sqrt(x);
        System.out.println("Square root of " + x + " is: " + result);
    }
}
<aside>
💡 **2**

A peak element is an element that is strictly greater than its neighbors.

Given a **0-indexed** integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to **any of the peaks**.

You may imagine that `nums[-1] = nums[n] = -∞`. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in `O(log n)` time.

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.

ans-:
public class PeakElement {
    public static int findPeakElement(int[] nums) {
        int left = 0;
        int right = nums.length - 1;

        while (left < right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] < nums[mid + 1]) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }

        return left;
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 3, 1};
        int peakIndex = findPeakElement(nums);
        int peakValue = nums[peakIndex];
        System.out.println("Peak element index: " + peakIndex);
        System.out.println("Peak element value: " + peakValue);

        nums = new int[]{1, 2, 1, 3, 5, 6, 4};
        peakIndex = findPeakElement(nums);
        peakValue = nums[peakIndex];
        System.out.println("Peak element index: " + peakIndex);
        System.out.println("Peak element value: " + peakValue);
    }
}
<aside>
💡 **3**

****

Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return *the only number in the range that is missing from the array.*
ans-:
Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.

Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.

Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.

ans-:
public class MissingNumber {
    public static int findMissingNumber(int[] nums) {
        int n = nums.length;
        int missing = n;

        for (int i = 0; i < n; i++) {
            missing ^= i ^ nums[i];
        }

        return missing;
    }

    public static void main(String[] args) {
        int[] nums = {3, 0, 1};
        int missingNumber = findMissingNumber(nums);
        System.out.println("Missing number: " + missingNumber);

        nums = new int[]{0, 1};
        missingNumber = findMissingNumber(nums);
        System.out.println("Missing number: " + missingNumber);

        nums = new int[]{9, 6, 4, 2, 3, 5, 7, 0, 1};
        missingNumber = findMissingNumber(nums);
        System.out.println("Missing number: " + missingNumber);
    }
}
<aside>
💡 **4**

Given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive.

There is only **one repeated number** in `nums`, return *this repeated number*.

You must solve the problem **without** modifying the array `nums` and uses only constant extra space.

ans-:
Input: nums = [1,3,4,2,2]
Output: 2

Input: nums = [3,1,3,4,2]
Output: 3

ans-:
public class RepeatedNumber {
    public static int findRepeatedNumber(int[] nums) {
        int tortoise = nums[0];
        int hare = nums[0];

        // Find the intersection point of the two pointers
        do {
            tortoise = nums[tortoise];
            hare = nums[nums[hare]];
        } while (tortoise != hare);

        // Move the tortoise to the beginning and advance both pointers at the same speed
        tortoise = nums[0];
        while (tortoise != hare) {
            tortoise = nums[tortoise];
            hare = nums[hare];
        }

        return hare;
    }

    public static void main(String[] args) {
        int[] nums = {1, 3, 4, 2, 2};
        int repeatedNumber = findRepeatedNumber(nums);
        System.out.println("Repeated number: " + repeatedNumber);

        nums = new int[]{3, 1, 3, 4, 2};
        repeatedNumber = findRepeatedNumber(nums);
        System.out.println("Repeated number: " + repeatedNumber);
    }
}
5.Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.
ans-:
import java.util.HashSet;
import java.util.ArrayList;
import java.util.List;

public class ArrayIntersection {
    public static int[] intersection(int[] nums1, int[] nums2) {
        HashSet<Integer> set = new HashSet<>();
        for (int num : nums1) {
            set.add(num);
        }

        List<Integer> intersectionList = new ArrayList<>();
        for (int num : nums2) {
            if (set.contains(num)) {
                intersectionList.add(num);
                set.remove(num); // To ensure uniqueness
            }
        }

        int[] intersectionArray = new int[intersectionList.size()];
        for (int i = 0; i < intersectionList.size(); i++) {
            intersectionArray[i] = intersectionList.get(i);
        }

        return intersectionArray;
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 2, 2, 1};
        int[] nums2 = {2, 2};
        int[] intersectionArray = intersection(nums1, nums2);
        System.out.print("Intersection: [");
        for (int i = 0; i < intersectionArray.length; i++) {
            System.out.print(intersectionArray[i]);
            if (i != intersectionArray.length - 1) {
                System.out.print(", ");
            }
        }
        System.out.println("]");

        nums1 = new int[]{4, 9, 5};
        nums2 = new int[]{9, 4, 9, 8, 4};
        intersectionArray = intersection(nums1, nums2);
        System.out.print("Intersection: [");
        for (int i = 0; i < intersectionArray.length; i++) {
            System.out.print(intersectionArray[i]);
            if (i != intersectionArray.length - 1) {
                System.out.print(", ");
            }
        }
        System.out.println("]");
    }
}
<aside>
💡 **6**

Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become:

- `[4,5,6,7,0,1,2]` if it was rotated `4` times.
- `[0,1,2,4,5,6,7]` if it was rotated `7` times.

Notice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.

Given the sorted rotated array `nums` of **unique** elements, return *the minimum element of this array*.

You must write an algorithm that runs in `O(log n) time.`

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times.
ans-:
public class MinimumInRotatedSortedArray {
    public static int findMin(int[] nums) {
        int left = 0;
        int right = nums.length - 1;

        // If the array is not rotated, the first element is the minimum
        if (nums[left] <= nums[right]) {
            return nums[left];
        }

        while (left < right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] > nums[right]) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }

        return nums[left];
    }

    public static void main(String[] args) {
        int[] nums = {3, 4, 5, 1, 2};
        int min = findMin(nums);
        System.out.println("Minimum element: " + min);

        nums = new int[]{4, 5, 6, 7, 0, 1, 2};
        min = findMin(nums);
        System.out.println("Minimum element: " + min);

        nums = new int[]{11, 13, 15, 17};
        min = findMin(nums);
        System.out.println("Minimum element: " + min);
    }
}
<aside>
💡 **7**

Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value.

If `target` is not found in the array, return `[-1, -1]`.

You must write an algorithm with `O(log n)` runtime complexity.
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Input: nums = [], target = 0
Output: [-1,-1]

public class FindFirstLastPosition {
    public static int[] searchRange(int[] nums, int target) {
        int[] result = {-1, -1};

        int leftIndex = findLeftmostIndex(nums, target);
        if (leftIndex == -1) {
            return result;
        }

        int rightIndex = findRightmostIndex(nums, target);

        result[0] = leftIndex;
        result[1] = rightIndex;

        return result;
    }

    private static int findLeftmostIndex(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        int leftIndex = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] >= target) {
                right = mid - 1;
                if (nums[mid] == target) {
                    leftIndex = mid;
                }
            } else {
                left = mid + 1;
            }
        }

        return leftIndex;
    }

    private static int findRightmostIndex(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        int rightIndex = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] <= target) {
                left = mid + 1;
                if (nums[mid] == target) {
                    rightIndex = mid;
                }
            } else {
                right = mid - 1;
            }
        }

        return rightIndex;
    }

    public static void main(String[] args) {
        int[] nums = {5, 7, 7, 8, 8, 10};
        int target = 8;
        int[] result = searchRange(nums, target);
        System.out.println("Range: [" + result[0] + ", " + result[1] + "]");

        nums = new int[]{5, 7, 7, 8, 8, 10};
        target = 6;
        result = searchRange(nums, target);
        System.out.println("Range: [" + result[0] + ", " + result[1] + "]");

        nums = new int[]{};
        target = 0;
        result = searchRange(nums, target);
        System.out.println("Range: [" + result[0] + ", " + result[1] + "]");
    }
}
8.Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.

ans-:
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntersectionOfArrays {
    public static int[] intersect(int[] nums1, int[] nums2) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();

        // Count the frequencies of elements in nums1
        for (int num : nums1) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        List<Integer> intersectionList = new ArrayList<>();

        // Check for intersection while iterating through nums2
        for (int num : nums2) {
            if (frequencyMap.containsKey(num) && frequencyMap.get(num) > 0) {
                intersectionList.add(num);
                frequencyMap.put(num, frequencyMap.get(num) - 1);
            }
        }

        int[] intersection = new int[intersectionList.size()];

        // Convert the intersection list to an array
        for (int i = 0; i < intersectionList.size(); i++) {
            intersection[i] = intersectionList.get(i);
        }

        return intersection;
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 2, 2, 1};
        int[] nums2 = {2, 2};
        int[] intersection = intersect(nums1, nums2);
        System.out.print("Intersection: [");
        for (int i = 0; i < intersection.length; i++) {
            System.out.print(intersection[i]);
            if (i != intersection.length - 1) {
                System.out.print(", ");
            }
        }
        System.out.println("]");

        nums1 = new int[]{4, 9, 5};
        nums2 = new int[]{9, 4, 9, 8, 4};
        intersection = intersect(nums1, nums2);
        System.out.print("Intersection: [");
        for (int i = 0; i < intersection.length; i++) {
            System.out.print(intersection[i]);
            if (i != intersection.length - 1) {
                System.out.print(", ");
            }
        }
        System.out.println("]");
    }
}






